#!/usr/bin/php -q
<?php

function dumpTriples($events, $namespace)
{
	foreach($events as $event)
	{
		if(!(array_key_exists("hash", $event)))
		{
			continue;
		}
		$uri = $namespace . $event['hash'];
		print("<" . $uri . "> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/NET/c4dm/event.owl#Event> .\n");
		if(array_key_exists("summary", $event))
		{
			print("<" . $uri . "> <http://www.w3.org/2000/01/rdf-schema#label> \"" . str_replace("\"", "\\\"", $event['summary']) . "\" .\n");
		}
		if(array_key_exists("description", $event))
		{
			print("<" . $uri . "> <http://purl.org/dc/terms/description> \"" . str_replace("\"", "\\\"", $event['description']) . "\" .\n");
		}
		if(array_key_exists("dtstart", $event))
		{
			print("<" . $uri . "> <http://purl.org/NET/c4dm/event.owl#time> <" . $uri . "#time> .\n");
			print("<" . $uri . "#time> <http://purl.org/NET/c4dm/timeline.owl#start> \"" . date("c", $event['dtstart']) . "\"^^<http://www.w3.org/2001/XMLSchema#dateTime> .\n");
			print("<" . $uri . "#time> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/NET/c4dm/timeline.owl#Interval> .\n");
		}
		if(array_key_exists("dtend", $event))
		{
			print("<" . $uri . "> <http://purl.org/NET/c4dm/event.owl#time> <" . $uri . "#time> .\n");
			print("<" . $uri . "#time> <http://purl.org/NET/c4dm/timeline.owl#end> \"" . date("c", $event['dtend']) . "\"^^<http://www.w3.org/2001/XMLSchema#dateTime> .\n");
			print("<" . $uri . "#time> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/NET/c4dm/timeline.owl#Interval> .\n");
		}

		continue;

		if(array_key_exists("", $event))
		{
			print("<" . $uri . "> <> <> .\n");
		}
	}
}

function parseEvent($eventstring)
{
	$event = array();
	$last = "";
	$data = explode("\n", $eventstring);
	$i = count($data) - 1;
	while($i > 0)
	{
		if(strcmp(substr($data[$i], 0, 1), " ") == 0)
		{
			$data[$i - 1] .= substr($data[$i], 1);
			$data[$i] = "";
		}
		$i--;
	}
	foreach($data as $item)
	{
		$item = trim($item);
		if(strlen($item) == 0)
		{
			continue;
		}
		$parse = explode(":", $item, 2);
		$args = explode(";", $parse[0]);
		$key = trim(strtolower($args[0]));
		if((strcmp($key, "begin") == 0) | (strcmp($key, "end") == 0))
		{
			continue;
		}
		$value = $parse[1];
		if((strcmp($key, "dtstart") == 0) | (strcmp($key, "dtend") == 0) | (strcmp($key, "created") == 0) | (strcmp($key, "last-modified") == 0) | (strcmp($key, "dtstamp") == 0))
		{
			$value = strtotime($value);
		}
		$event[$key] = $value;
	}
	$uid = @$event['uid'];
	if(strlen($uid) > 0)
	{
		$event['hash'] = md5($uid);
	}
	return($event);
}

function readIcs($path)
{
	if(!(file_exists($path)))
	{
		return(array());
	}
	$data = explode("\nBEGIN:VEVENT", "\n" . str_replace("\r", "", file_get_contents($path)));
	$arr = array();
	foreach($data as $event)
	{
		$arr[] = parseEvent($event);
	}
	return($arr);
}

if(count($argv) != 3)
{
	print("Improper usage.\n");
	print("ics2rdf [ics_file] [namespace]\n");
	exit();
}

$path = $argv[1];
$ns = $argv[2];
$arr = readIcs($path);

dumpTriples($arr, $ns);
